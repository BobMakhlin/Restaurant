@using Models

@page "/product/details/{id:int}"
@inject HttpClient httpClient

@if (Product == null)
{
    <Loading />
}
else
{
    <h3>@Product.Title</h3>
    <div class="row">
        <div class="col-md-3">
            <img class="img-fluid" src="./img/products/@Product.Photo" />
            @foreach (var item in Product.Labels)
            {
                <span class="badge badge-secondary m-md-3">@item.Title</span>
            }
        </div>
        <div class="col-md-2">
            <div class="card">
                <h3>@Math.Round(Product.Price, 0) ГРН</h3>
                <button type="button" class="btn-sm btn-secondary">В корзину</button>
                <p>@Product.Description</p>
                <h5>Общий вес - @Product.Weight</h5>
            </div>
        </div>
    </div>
    <h5 class="mb-5">Ингредиенты:</h5>
    @foreach (var item in Product.Ingredients)
    {
        <div class="row">
            <div class="col-2">
                <h6>@item.Title</h6>
            </div>
            <div class="col-1">
                <img class="img-fluid" src="./img/ingredient/@item.Photo" />
            </div>

        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductPoco Product { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Product = await httpClient.GetFromJsonAsync<ProductPoco>("https://localhost:44390/api/product/" + Id);
    }
}
